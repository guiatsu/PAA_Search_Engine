import json
import re
class SearchEngine:
    def __init__(self):
        file = open("Crawler.json","r")
        self.data = json.load(file)
        self.search_dict = {}
    def search(self,word):
        word = word.lower()
        #ve se a palavra estah no json
        sites = self.data.get(word)

        if sites != None:
            #se estiver pega os dados dela e salva no hash de busca
            self.search_dict[word] = sites
            #pega as chaves do hash da palavra
            sites = self.search_dict[word].keys()
        else:
            #senao pega um dict vazio
            sites = {}.keys()
        #retorna o resultado da busca e a palavra
        return sites,word

    def And(self,word1,word2):
        #pega as urls em comuns onde ambas palavras aparecem
        urls = word1[0] & word2[0]
        word_list = []
        #ve se a primeira palavra(ou query) tem uma entrada
        if(self.search_dict.get(word1) != None):
            #ve se a segunda palavra(ou query) tem uma entrada
            if(self.search_dict.get(word2) != None):
                #se nao tiver
                if(self.search_dict.get(word1 + " AND " + word2) == None):
                    if(word1.split(" ") == 1):
                        word_list = [word1]
                    else:
                        word_list = self.search_dict[word1]["word_list"]
                    if(word2.split(" ") == 1):
                        word_list.append(word2)
                    else:
                        word_list += self.search_dict[word2]["word_list"]
                    
                    self.search_dict[word1 + " AND " + word2] = {
                        "word_list": word_list,
                        "pages" : {

                        },
                    }
                for i in urls:
                    
                    word1_data = self.search_dict.get(word1)["pages"].get(i)
                    word2_data = self.search_dict.get(word2)["pages"].get(i)
                    
                    if(len(word1_data["extracts"]) <= len(word2_data["extracts"])):
                        for j in word1_data["extracts"]:
                            aux = j[0]
                            aux_map = aux.maketrans('¿¿¿¿¿ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜÏÖÑÝåáçéíóúàèìòùâêîôûãõëüïöñýÿ',
                                                    'SZszYACEIOUAEIOUAEIOUAOEUIONYaaceiouaeiouaeiouaoeuionyy')
                            aux = re.sub("[^A-Za-z0-9- ]","",aux)
                            aux = aux.translate(aux_map)
                            aux = re.sub("\t"," ",aux)
                            aux = re.sub("\s{2,}"," ",aux)
                            aux = aux.strip()
                            found = True
                            #verifica se tem todas as palavras no trecho
                            for k in self.search_dict[word1 + " AND " + word2]["word_list"]:
                                if(j.lower.find(k) == -1):
                                    found = False
                                else:
                                    continue
                            if(found == True):
                                


        return urls

    def Or(self,word1,word2):
        return word1 | word2

    def Not(self,word1,word2):
        return word1-word2

    def String(self,string):
        words = string.split(" ")
        search = 0
        urls = set()
        if len(words) == 1:
            return self.search(words[0])
        else:
            search = self.search(words[0])
            for i in range(1,len(words)):
                search = self.And(search,self.search(words[i]))
            if search == set():
                return set()
            else:
                pages = self.data.get(words[0])
                if(pages == None):
                    return set()
                else:
                    pages = pages["pages"]
                    for i in search:
                        found = False
                        extracts = pages[i]["extracts"]
                        for j in extracts:
                            aux = j[0]
                            aux_map = aux.maketrans('¿¿¿¿¿ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜÏÖÑÝåáçéíóúàèìòùâêîôûãõëüïöñýÿ',
                                                    'SZszYACEIOUAEIOUAEIOUAOEUIONYaaceiouaeiouaeiouaoeuionyy')
                            aux = aux.translate(aux_map)
                            aux = re.sub("[^A-Za-z0-9- ]","",aux)
                            aux = re.sub("\t"," ",aux)
                            aux = re.sub("\s{2,}"," ",aux)
                            aux = aux.strip()
                            if(aux.lower().find(string) == -1):
                                continue
                            else:
                                found = True
                                urls.add(i)
                                break
                    return urls


    def get_occurences(self,elem):
        return elem[1]["occurrences"]


SE = SearchEngine()
print(SE.String("ir pará"))